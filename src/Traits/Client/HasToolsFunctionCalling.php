<?php

namespace DeepSeek\Traits\Client;

use DeepSeek\Enums\Queries\QueryRoles;

trait HasToolsFunctionCalling
{
    /**
     * @param array $tools A list of tools the model may call.
     * @return self The current instance for method chaining.
     */
    public function setTools(array $tools): self
    {
        $this->tools = $tools;
        return $this;
    }

    /**
     * Add a query tool calls to the accumulated queries list.
     *
     * @param array $toolCalls The tool calls generated by the model, such as function calls.
     * @param string $content
     * @param string|null $role
     * @return self The current instance for method chaining.
     */
    public function queryToolCall(array $toolCalls, string $content, ?string $role = null): self
    {
        $this->queries[] = $this->buildToolCallQuery($toolCalls, $content, $role);
        return $this;
    }

    public function buildToolCallQuery(array $toolCalls, string $content, ?string $role = null): array
    {
        $query = [
            'role' => $role ?: QueryRoles::ASSISTANT->value,
            'tool_calls' => $toolCalls,
            'content' => $content,
        ];
        return $query;
    }

    /**
     * Add a query tool to the accumulated queries list.
     *
     * @param string $toolCallId
     * @param string $content
     * @param string|null $role
     * @return self The current instance for method chaining.
     */
    public function queryTool(string $toolCallId, string $content , ?string $role = null): self
    {
        $this->queries[] = $this->buildToolQuery($toolCallId, $content, $role);
        return $this;
    }

    public function buildToolQuery(string $toolCallId, string $content, ?string $role): array
    {
        $query = [
            'role' => $role ?: QueryRoles::TOOL->value,
            'tool_call_id' => $toolCallId,
            'content' => $content,
        ];
        return $query;
    }
}
